{"version":3,"sources":["image.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","R1","R2","R3","C","Av","Fc","Q","e","this","setState","target","name","value","r2","r3","Math","pi","c","sqrt","className","src","logo","alt","for","type","placeholder","onChange","handleChange","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,qNCgF5BC,G,kBA3EX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACHC,MAAQ,CACXC,GAAG,GACHC,GAAG,EACHC,GAAG,EACHC,EAAE,EACFC,GAAI,EACJC,GAAG,EACHC,EAAE,GATe,E,0EAaNC,GACdC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAQJ,EAAEG,OAAOE,QAD1B,MAESJ,KAAKT,MAAzBC,EAFW,EAEXA,GAAGC,EAFQ,EAERA,GAAGC,EAFK,EAELA,GAAGG,EAFE,EAEFA,GAAGD,EAFD,EAECA,GAAGD,EAFJ,EAEIA,EAGhBU,GALY,EAEMP,EAGfF,GAAI,EAAEJ,IACTc,EAAG,SAAE,GAAG,EAAEC,KAAKC,GAAGb,EAAEF,GAAM,IAAID,EAAGe,KAAKC,IACtCC,EAAE,GAAG,EAAEF,KAAKC,GAAID,KAAKG,KAAKlB,EAAGe,KAAKC,GAAGd,GAAKD,EAAGI,GACjDG,KAAKC,SAAS,CAEZR,GAAGY,EACHX,GAAGY,EACHX,EAAEc,M,+BAIG,IAAD,EACkBT,KAAKT,MAAxBC,EADC,EACDA,GAAGC,EADF,EACEA,GAAGC,EADL,EACKA,GAAUC,GADf,EACQE,GADR,EACWD,GADX,EACeD,GACrB,OACE,yBAAKgB,UAAU,OACf,sEACA,6HACE,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,QACb,kCAAQhB,EAAR,WACA,mCAASH,EAAT,SACA,mCAASC,EAAT,SACA,mCAASC,EAAT,UAED,yBAAKiB,UAAU,QACd,2BAAOI,IAAI,IAAX,OACA,2BACEC,KAAK,KACLb,KAAK,KACLc,YAAY,KACZb,MAAOJ,KAAKT,MAAMK,GAClBsB,SAAUlB,KAAKmB,aAAaC,KAAKpB,QAEnC,2BAAOe,IAAI,IAAX,OACA,2BACEC,KAAK,KACLb,KAAK,KACLc,YAAY,KACZb,MAAOJ,KAAKT,MAAMM,GAClBqB,SAAUlB,KAAKmB,aAAaC,KAAKpB,QAEnC,2BAAOe,IAAI,IAAX,MACA,2BACEC,KAAK,IACLb,KAAK,IACLc,YAAY,IACZb,MAAOJ,KAAKT,MAAMO,EAClBoB,SAAUlB,KAAKmB,aAAaC,KAAKpB,e,GAnE7BqB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67463bf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.974740f2.jpg\";","import React from 'react';\nimport logo from './image.jpg';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n    this.state = {\n      R1:.1,\n      R2:1,\n      R3:1,\n      C:1,\n      Av: 1,\n      Fc:1,\n      Q:1,\n      };\n  }\n  \n    handleChange(e) {\n   this.setState({ [e.target.name] : e.target.value });\n    let {R1,R2,R3,Fc,Av,C,Q}=this.state;\n    let av=R2/(2*R1);\n    let r1=R2/(2*Av);\n    let r2=Av/(2*R1);\n    let r3=((1/(2*Math.pi*C*R2))**2)/(R1*Math.pi);\n    let c=1/(2*Math.pi*(Math.sqrt(R1*Math.pi*R3))*R2*Fc);\n    this.setState({\n      // R1:r1,\n      R2:r2,\n      R3:r3,\n      C:c\n    });\n  }\n  \n  render(){\n    let {R1,R2,R3,Fc,Av, C}=this.state;\n    return (\n      <div className=\"App\">\n      <h2>BPF circuit Calculator by Jean Catulle</h2>\n      <h3>A calculator that calculates values in the BPF circuit to meet goal criteria (Q, AV and f0)!!</h3>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className='coll'>\n            <h2>C: {C} farads</h2>\n            <h2>R1: {R1} ohms</h2>\n            <h2>R2: {R2} ohms</h2>\n            <h2>R3: {R3} ohms</h2>\n          </div>\n           <div className='coll'>\n            <label for=\"\">Av?</label>\n            <input \n              type=\"Av\" \n              name=\"Av\" \n              placeholder='Av'\n              value={this.state.Av}\n              onChange={this.handleChange.bind(this)}\n              />\n            <label for=\"\">Fc?</label>\n            <input \n              type=\"Fc\" \n              name=\"Fc\" \n              placeholder='Fc'\n              value={this.state.Fc}\n              onChange={this.handleChange.bind(this)}\n              />\n            <label for=\"\">Q?</label>\n            <input \n              type=\"Q\" \n              name=\"Q\" \n              placeholder='Q'\n              value={this.state.Q}\n              onChange={this.handleChange.bind(this)}\n              />\n           </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}